---
apiVersion: v1
kind: Namespace
metadata:
  name: ${INGESTION_NAMESPACE}

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: ${INGESTION_PV}
spec:
  capacity:
    storage: ${INGESTION_PV_SIZE}
  volumeMode: Filesystem
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: efs-sc
  csi:
    driver: efs.csi.aws.com
    volumeHandle: ${EFS_ID}:/:${EFS_AP}
    volumeAttributes:
      encryptInTransit: "true"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ${INGESTION_PVC}
  namespace: ${INGESTION_NAMESPACE}
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: efs-sc
  volumeName: ${INGESTION_PV}
  selector:
    matchLabels:
      name: ${INGESTION_PV}
  resources:
    requests:
      storage: ${INGESTION_PV_SIZE}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: ${INGESTION_NAMESPACE}
  name: ${INGESTION_DEPLOYMENT_NAME}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: ${INGESTION_APP_NAME}
      namespace: ${INGESTION_NAMESPACE}
      alpha.eksctl.io/nodegroup-name: ${INGESTION_NODE_GROUP}
  replicas: ${INGESTION_MIN_REP}
  revisionHistoryLimit: 4
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ${INGESTION_APP_NAME}
        namespace: ${INGESTION_NAMESPACE}
        alpha.eksctl.io/nodegroup-name: ${INGESTION_NODE_GROUP}
    spec:
      containers:
        - image: ${INGESTION_REPOSITORY}:${TAG}
          imagePullPolicy: Always
          name: ${INGESTION_APP_NAME}
          ports:
            - containerPort: 3000
          envFrom:
            - secretRef:
                name: ${INGESTION_SECRET}
          resources:
            requests:
              cpu: ${INGESTION_REQ_CPU}
              memory: ${INGESTION_REQ_MEM}
            limits:
              cpu: ${INGESTION_LIM_CPU}
              memory: ${INGESTION_LIM_MEM}
          livenessProbe:
            failureThreshold: 2
            httpGet:
              path: /healthcheck
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          volumeMounts:
            - mountPath: /storage
              name: ${INGESTION_VOLUME}
      volumes:
        - name: ${INGESTION_VOLUME}
          persistentVolumeClaim:
            claimName: ${INGESTION_PVC}
      nodeSelector:
        "eks.amazonaws.com/nodegroup": ${INGESTION_NODE_GROUP}

---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: ${INGESTION_DEPLOYMENT_NAME}
  namespace: ${INGESTION_NAMESPACE}
spec:
  maxReplicas: ${INGESTION_MAX_REP} # maximum replicas of pods
  minReplicas: ${INGESTION_MIN_REP}
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ${INGESTION_DEPLOYMENT_NAME} # TARGET name of the deployment the autoscaler need to be run on
  targetCPUUtilizationPercentage: ${INGESTION_TGT_CPU_PERCENT} # CPU maximum amount of use on the pod is set to 30%.

---
apiVersion: v1
kind: Service
metadata:
  namespace: ${INGESTION_NAMESPACE}
  name: ${INGESTION_SERVICE_NAME}
spec:
  ports:
    - port: 80
      targetPort: 3000
      protocol: TCP
  type: NodePort
  selector:
    app.kubernetes.io/name: ${INGESTION_APP_NAME}
    namespace: ${INGESTION_NAMESPACE}
    alpha.eksctl.io/nodegroup-name: ${INGESTION_NODE_GROUP}

---
# apiVersion: traefik.containo.us/v1alpha1
# kind: Middleware
# metadata:
#   name: ${INGESTION_MIDDLEWARE_NAME}
#   namespace: ${INGESTION_NAMESPACE}
# spec:
#   headers:
#     customResponseHeaders:
#       X-XSS-Protection: "1; mode=block"
#       Referrer-Policy: "strict-origin-when-cross-origin"
#       Permissions-Policy: "geolocation=(self), camera=(self), microphone=(self), autoplay=(self)"
#       X-Content-Type-Options: "nosniff"
#       X-Frame-Options: "sameorigin"
#       X-Permitted-Cross-Domain-Policies: "none"
#       Strict-Transport-Security: "max-age=31536000; includeSubdomains; preload"
#       Cross-Origin-Embedder-Policy: "unsafe-none"
#       Cross-Origin-Opener-Policy: "unsafe-none"
#       Cross-Origin-Resource-Policy: "same-origin"
#       Cache-Control: "no-cache, no-store, must-revalidate"

# ---
# apiVersion: traefik.containo.us/v1alpha1
# kind: IngressRoute
# metadata:
#   name: ${INGESTION_INGRESSROUTE_NAME}
#   namespace: ${INGESTION_NAMESPACE}
# spec:
#   entryPoints:
#     - web
#   routes:
#     - match: Host(`${INGESTION_HOST_NAME}`)
#       kind: Rule
#       middlewares:
#         - name: ${INGESTION_MIDDLEWARE_NAME}
#       services:
#         - name: ${INGESTION_SERVICE_NAME}
#           port: 80

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: ${INGESTION_NAMESPACE}
  name: ${INGESTION_INGRESS_NAME}
  annotations:
    # external-dns.alpha.kubernetes.io/hostname: ${INGESTION_HOST_NAME}
    alb.ingress.kubernetes.io/target-type: instance
    alb.ingress.kubernetes.io/certificate-arn: ${INGESTION_CERTIFICATE_ARN}
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/load-balancer-name: ${INGESTION_ALB}
    alb.ingress.kubernetes.io/load-balancer-attributes: access_logs.s3.enabled=true,access_logs.s3.bucket=ss-prd1-v2-alb-access-logs-new,access_logs.s3.prefix=integrations-alb,idle_timeout.timeout_seconds=60
    alb.ingress.kubernetes.io/wafv2-acl-arn: ${WAF_ARN}
    alb.ingress.kubernetes.io/ssl-redirect: "443"
    kubernetes.io/ingress.class: ${ING_CLS_NAME}
spec:
  rules:
    - host: ${INGESTION_HOST_NAME}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: ${INGESTION_SERVICE_NAME}
                port:
                  number: 80
