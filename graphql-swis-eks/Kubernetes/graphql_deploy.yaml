---
apiVersion: v1
kind: Namespace
metadata:
  name: ${GQLSWIS_NAMESPACE}

# Create kubernets service account
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ksa-sa 
  namespace: ${GQLSWIS_NAMESPACE}

# IAM policy binding between the GSA & KSA service accounts. 
---
apiVersion: iam.cnrm.cloud.google.com/v1beta1
kind: IAMPolicy
metadata:
  name: iampolicy-workload-identity
  namespace: ${GQLSWIS_NAMESPACE}
spec:
  resourceRef:
    apiVersion: iam.cnrm.cloud.google.com/v1beta1
    kind: IAMServiceAccount
    name: gke-workload-identity-sa-dev@experiencedotcom-dev.iam.gserviceaccount.com
  bindings:
    - role: roles/iam.workloadIdentityUser
      members:
        - serviceAccount:experiencedotcom-dev.svc.id.goog[exp-prod-gqlswis/ksa-sa]

# Annotate the Kubernetes service account with GSA IAM
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    iam.gke.io/gcp-service-account: gke-workload-identity-sa-dev@experiencedotcom-dev.iam.gserviceaccount.com
  name: ksa-sa
  namespace: ${GQLSWIS_NAMESPACE}

# ---
# apiVersion: v1
# kind: PersistentVolume
# metadata:
#   name: ${GQLSWIS_PV}
# spec:
#   storageClassName: "standard-rwx"
#   capacity:
#     storage: ${GQLSWIS_PV_SIZE} #20Gi
#   accessModes:
#     - ReadWriteMany
#   persistentVolumeReclaimPolicy: Retain
#   volumeMode: Filesystem
#   csi:
#     driver: filestore.csi.storage.gke.io
#     volumeHandle: "modeInstance/us-east1-b/exp-gqlswis/gqlswis"
#     volumeAttributes:
#       ip: 10.178.192.2
#       volume: gqlswis
     
# ---
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: ${GQLSWIS_PVC}
#   namespace: ${GQLSWIS_NAMESPACE}
# spec:
#   accessModes:
#     - ReadWriteMany
#   storageClassName: "standard-rwx"
#   volumeName: ${GQLSWIS_PV}
#   resources:
#     requests:
#       storage: ${GQLSWIS_PV_SIZE}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: ${GQLSWIS_NAMESPACE}
  name: ${GQLSWIS_DEPLOYMENT_NAME}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: ${GQLSWIS_APP_NAME}
      namespace: ${GQLSWIS_NAMESPACE}
      cloud.google.com/gke-nodepool: swis-ng 
  replicas: ${GQLSWIS_MIN_REP}
  revisionHistoryLimit: 4
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ${GQLSWIS_APP_NAME}
        namespace: ${GQLSWIS_NAMESPACE}
        cloud.google.com/gke-nodepool: swis-ng
    spec:
      serviceAccountName: ksa-sa
      containers:
        - name: ${GQLSWIS_APP_NAME}
          image: "us-east4-docker.pkg.dev/experiencedotcom-devops/experiencedotcom-dev/swis-graphql:latest"
          imagePullPolicy: Always    
          ports:
            - containerPort: 8080
          readinessProbe:
            httpGet:
              path: /healthcheck
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 20
            timeoutSeconds: 10
          livenessProbe:
            httpGet:
              path: /healthcheck
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 20
            timeoutSeconds: 10         
          envFrom:
            - secretRef:
                name: ${GQLSWIS_SECRET}
        - name: cloud-sql-proxy
          image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:latest
          args:
            - "--private-ip"
            - "--port=3306"
            - "experiencedotcom-dev:us-east4:ss-prd1-v2-app-mysql-dev"
          securityContext:
            runAsNonRoot: true
          resources:
            requests:
              cpu: ${GQLSWIS_REQ_CPU}
              memory: ${GQLSWIS_REQ_MEM}
            limits:
              cpu: ${GQLSWIS_LIM_CPU}
              memory: ${GQLSWIS_LIM_MEM}
      #     volumeMounts:
      #       - mountPath: /storage
      #         name: ${GQLSWIS_VOLUME}
      # volumes:
      #   - name: ${GQLSWIS_VOLUME}
      #     persistentVolumeClaim:
      #       claimName: ${GQLSWIS_PVC}
      nodeSelector:
        cloud.google.com/gke-nodepool: swis-ng

# graphql hpa
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ${GQLSWIS_DEPLOYMENT_NAME}
  namespace: ${GQLSWIS_NAMESPACE}
spec:
  maxReplicas: ${GQLSWIS_MAX_REP} # maximum replicas of pods
  minReplicas: ${GQLSWIS_MIN_REP}
  behavior:
    scaleDown:
      policies:
        - type: Pods
          value: 1
          periodSeconds: 30
        - type: Percent
          value: 10
          periodSeconds: 30
      selectPolicy: Min
      stabilizationWindowSeconds: 300
    scaleUp:
      policies:
        - type: Pods
          value: 1
          periodSeconds: 60
        - type: Percent
          value: 10
          periodSeconds: 60
      selectPolicy: Max
      stabilizationWindowSeconds: 0
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ${GQLSWIS_DEPLOYMENT_NAME}
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 80 #${GQLSWIS_TGT_CPU_PERCENT}
  - type: Resource
    resource:
      name: memory
      target:
        type: AverageValue
        averageValue: 24000Mi

---
apiVersion: v1
kind: Service
metadata:
  namespace: ${GQLSWIS_NAMESPACE}
  name: ${GQLSWIS_SERVICE_NAME}
spec:
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
  type: NodePort
  externalTrafficPolicy: Cluster
  selector:
    app.kubernetes.io/name: ${GQLSWIS_APP_NAME}
    namespace: ${GQLSWIS_NAMESPACE}
    cloud.google.com/gke-nodepool: swis-ng

# Google Managed SSL Certificate.
---
apiVersion: networking.gke.io/v1
kind: ManagedCertificate
metadata:
  name: managed-certificate
  namespace: ${GQLSWIS_NAMESPACE}
spec:
  domains:
    - proapi-gcp.experience.com

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: ${GQLSWIS_NAMESPACE}
  name: ${GQLSWIS_INGRESS_NAME}
  annotations:
    kubernetes.io/ingress.allow-http: "false"
    networking.gke.io/managed-certificates: managed-certificate
    kubernetes.io/ingress.global-static-ip-name: exp-prod-gqlswis
spec:
  rules:
    - host: "proapi-gcp.experience.com"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: ${GQLSWIS_SERVICE_NAME}
                port:
                  number: 80