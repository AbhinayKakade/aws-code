# /v2/prl
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: ${RAILS_API_NAMESPACE}
  name: ${RAILS_API_DEPLOYMENT_NAME_UBUNTU}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: ${RAILS_API_APP_NAME_UBUNTU}
      namespace: ${RAILS_API_NAMESPACE}
      cloud.google.com/gke-nodepool: ${RAILS_API_NODE_GROUP}
  replicas: ${RAILS_API_MIN_REP_UBUNTU}
  revisionHistoryLimit: 4
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ${RAILS_API_APP_NAME_UBUNTU}
        namespace: ${RAILS_API_NAMESPACE}
        cloud.google.com/gke-nodepool: ${RAILS_API_NODE_GROUP}
    spec:
      containers:
        - image: "us-east4-docker.pkg.dev/experiencedotcom-devops/experiencedotcom-dev/rails-api-ubuntu:latest"
          imagePullPolicy: Always
          name: ${RAILS_API_APP_NAME_UBUNTU}
          ports:
            - containerPort: 3000
          resources:
            requests:
              cpu: ${RAILS_API_REQ_CPU_UBUNTU}
              memory: ${RAILS_API_REQ_MEM_UBUNTU}
            limits:
              cpu: ${RAILS_API_LIM_CPU_UBUNTU}
              memory: ${RAILS_API_LIM_MEM_UBUNTU}
          volumeMounts:
            - mountPath: /storage
              name: ${RAILS_API_VOLUME}
          livenessProbe:
            failureThreshold: 2
            httpGet:
              path: /healthcheck
              port: 80
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 20

      volumes:
        - name: ${RAILS_API_VOLUME}
          persistentVolumeClaim:
            claimName: ${RAILS_API_PVC}
      nodeSelector:
        "cloud.google.com/gke-nodepool": ${RAILS_API_NODE_GROUP}
