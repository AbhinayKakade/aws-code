---
apiVersion: v1
kind: Namespace
metadata:
  name: ${RAILS_API_NAMESPACE}

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: ${RAILS_API_PV}
spec:
  capacity:
    storage: ${RAILS_API_PV_SIZE}
  volumeMode: Filesystem
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  # storageClassName: efs-sc
  storageClassName: "standard-rwx"
  csi:
    driver: filestore.csi.storage.gke.io
    # driver: efs.csi.aws.com
    volumeHandle: ${EFS_ID}:/:${EFS_AP}
    volumeAttributes:
      encryptInTransit: "true"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ${RAILS_API_PVC}
  namespace: ${RAILS_API_NAMESPACE}
spec:
  accessModes:
    - ReadWriteMany
  # storageClassName: efs-sc
  storageClassName: "standard-rwx"
  volumeName: ${RAILS_API_PV}
  selector:
    matchLabels:
      name: ${RAILS_API_PV}
  resources:
    requests:
      storage: ${RAILS_API_PV_SIZE}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: ${RAILS_API_NAMESPACE}
  name: ${RAILS_API_DEPLOYMENT_NAME_UBUNTU}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: ${RAILS_API_APP_NAME_UBUNTU}
      namespace: ${RAILS_API_NAMESPACE}
      cloud.google.com/gke-nodepool: ${RAILS_API_NODE_GROUP}
  replicas: ${RAILS_API_MIN_REP_UBUNTU}
  revisionHistoryLimit: 4
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ${RAILS_API_APP_NAME_UBUNTU}
        namespace: ${RAILS_API_NAMESPACE}
        cloud.google.com/gke-nodepool: ${RAILS_API_NODE_GROUP}
    spec:
      containers:
        - image: "us-east4-docker.pkg.dev/experiencedotcom-devops/experiencedotcom-dev/rails-api-ubuntu:latest"
          imagePullPolicy: Always
          name: ${RAILS_API_APP_NAME_UBUNTU}
          ports:
            - containerPort: 3000
          resources:
            requests:
              cpu: ${RAILS_API_REQ_CPU_UBUNTU}
              memory: ${RAILS_API_REQ_MEM_UBUNTU}
            limits:
              cpu: ${RAILS_API_LIM_CPU_UBUNTU}
              memory: ${RAILS_API_LIM_MEM_UBUNTU}
          volumeMounts:
            - mountPath: /storage
              name: ${RAILS_API_VOLUME}
          livenessProbe:
            failureThreshold: 2
            httpGet:
              path: /healthcheck
              port: 80
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 20
          # livenessProbe:
          #   exec:
          #     command:
          #       - /bin/bash
          #       - -c
          #       - |-
          #         used=$(awk '{ print int($1/1.049e+6) }' /sys/fs/cgroup/memory/memory.usage_in_bytes);
          #         thresh=$(awk '{ print int( $1 / 1.049e+6 * 0.95 ) }' /sys/fs/cgroup/memory/memory.limit_in_bytes);
          #         if [[ ${used} -gt ${thresh} ]]; then exit 1; fi
          #   initialDelaySeconds: 300
          #   periodSeconds: 20
          #   failureThreshold: 2
          #   timeoutSeconds: 2
      volumes:
        - name: ${RAILS_API_VOLUME}
          persistentVolumeClaim:
            claimName: ${RAILS_API_PVC}
      nodeSelector:
        "cloud.google.com/gke-nodepool": ${RAILS_API_NODE_GROUP}

# rails-api hpa
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ${RAILS_API_DEPLOYMENT_NAME_UBUNTU}
  namespace: ${RAILS_API_NAMESPACE}
spec:
  maxReplicas: ${RAILS_API_MAX_REP_UBUNTU}
  minReplicas: ${RAILS_API_MIN_REP_UBUNTU}
  behavior:
    scaleDown:
      policies:
        - type: Pods
          value: 1
          periodSeconds: 30
        - type: Percent
          value: 10
          periodSeconds: 30
      selectPolicy: Min
      stabilizationWindowSeconds: 300
    scaleUp:
      policies:
        - type: Pods
          value: 1
          periodSeconds: 60
        - type: Percent
          value: 10
          periodSeconds: 60
      selectPolicy: Max
      stabilizationWindowSeconds: 0
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ${RAILS_API_DEPLOYMENT_NAME_UBUNTU}
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: ${RAILS_API_TGT_CPU_PERCENT_UBUNTU}
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80

# service
---
apiVersion: v1
kind: Service
metadata:
  namespace: ${RAILS_API_NAMESPACE}
  name: ${RAILS_API_SERVICE_NAME_UBUNTU}
spec:
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
  type: NodePort
  selector:
    app.kubernetes.io/name: ${RAILS_API_APP_NAME_UBUNTU}
    namespace: ${RAILS_API_NAMESPACE}
    cloud.google.com/gke-nodepool: ${RAILS_API_NODE_GROUP}
