---
apiVersion: v1
kind: Namespace
metadata:
  name: ${DART_NAMESPACE}

# ---
# apiVersion: v1
# kind: PersistentVolume
# metadata:
#   name: ${DART_PV}
# spec:
#   capacity:
#     storage: ${DART_PV_SIZE}
#   volumeMode: Filesystem
#   accessModes:
#     - ReadWriteMany
#   persistentVolumeReclaimPolicy: Retain
#   storageClassName: efs-sc
#   csi:
#     driver: efs.csi.aws.com
#     volumeHandle: ${EFS_ID}:/:${EFS_AP}
#     volumeAttributes:
#       encryptInTransit: "true"

# ---
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: ${DART_PVC}
#   namespace: ${DART_NAMESPACE}
# spec:
#   accessModes:
#     - ReadWriteMany
#   storageClassName: efs-sc
#   volumeName: ${DART_PV}
#   selector:
#     matchLabels:
#       name: ${DART_PV}
#   resources:
#     requests:
#       storage: ${DART_PV_SIZE}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: ${DART_NAMESPACE}
  name: ${DART_DEPLOYMENT_NAME}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: ${DART_APP_NAME}
      namespace: ${DART_NAMESPACE}
      cloud.google.com/gke-nodepool: swis_ng # ${DART_NODE_GROUP}
  replicas: ${DART_MIN_REP}
  revisionHistoryLimit: 4
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ${DART_APP_NAME}
        namespace: ${DART_NAMESPACE}
        cloud.google.com/gke-nodepool: swis_ng # ${DART_NODE_GROUP}
    spec:
      containers:
        # - image: ${DART_REPOSITORY}:${TAG}
        - image: us-east4-docker.pkg.dev/experiencedotcom-devops/experiencedotcom-dev/dart:latest        
          imagePullPolicy: Always
          name: ${DART_APP_NAME}
          ports:
            - containerPort: 5000
          envFrom:
            - secretRef:
                name: ${DART_SECRET}
          resources:
            requests:
              cpu: ${DART_REQ_CPU}
              memory: ${DART_REQ_MEM}
            limits:
              cpu: ${DART_LIM_CPU}
              memory: ${DART_LIM_MEM}
          # volumeMounts:
          #   - mountPath: /storage
          #     name: ${DART_VOLUME}
          livenessProbe:
            failureThreshold: 2
            httpGet:
              path: /
              port: 5000
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
      # volumes:
      #   - name: ${DART_VOLUME}
      #     persistentVolumeClaim:
      #       claimName: ${DART_PVC}
      nodeSelector:
        cloud.google.com/gke-nodepool: swis_ng # ${DART_NODE_GROUP}

---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: ${DART_DEPLOYMENT_NAME}
  namespace: ${DART_NAMESPACE}
spec:
  maxReplicas: ${DART_MAX_REP} # maximum replicas of pods
  minReplicas: ${DART_MIN_REP}
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ${DART_DEPLOYMENT_NAME} # TARGET name of the deployment the autoscaler need to be run on
  targetCPUUtilizationPercentage: ${DART_TGT_CPU_PERCENT} # CPU maximum amount of use on the pod is set to 30%.

---
apiVersion: v1
kind: Service
metadata:
  namespace: ${DART_NAMESPACE}
  name: ${DART_SERVICE_NAME}
spec:
  ports:
    - port: 80
      targetPort: 5000
      protocol: TCP
  type: NodePort
  selector:
    app.kubernetes.io/name: ${DART_APP_NAME}
    namespace: ${DART_NAMESPACE}
    cloud.google.com/gke-nodepool: ${DART_NODE_GROUP}


# Google Managed SSL Certificate.
---
apiVersion: networking.gke.io/v1
kind: ManagedCertificate
metadata:
  name: managed-certificate
  namespace: ${GQLSWIS_NAMESPACE}
spec:
  domains:
    - reports-gcp.experience.com

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: ${DART_NAMESPACE}
  name: ${DART_INGRESS_NAME}
  annotations:
    # alb.ingress.kubernetes.io/target-type: instance
    # alb.ingress.kubernetes.io/certificate-arn: ${DART_CERTIFICATE_ARN}
    # alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
    # alb.ingress.kubernetes.io/scheme: internet-facing
    # alb.ingress.kubernetes.io/load-balancer-name: ${DART_ALB}
    # alb.ingress.kubernetes.io/load-balancer-attributes: access_logs.s3.enabled=true,access_logs.s3.bucket=ss-prd1-v2-alb-access-logs-new,access_logs.s3.prefix=reporting-alb,idle_timeout.timeout_seconds=120
    # alb.ingress.kubernetes.io/wafv2-acl-arn: ${WAF_ARN}
    # alb.ingress.kubernetes.io/ssl-redirect: "443"
    # alb.ingress.kubernetes.io/target-node-labels: eks.amazonaws.com/nodegroup=${SWIS_NODE_GROUP}
    # kubernetes.io/ingress.class: ${ING_CLS_NAME}
    kubernetes.io/ingress.allow-http: "false"
    networking.gke.io/managed-certificates: managed-certificate
    kubernetes.io/ingress.global-static-ip-name: exp-prod-dart
spec:
  rules:
    - host: "reports-gcp.experience.com" # ${DART_HOST_NAME}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: ${DART_SERVICE_NAME}
                port:
                  number: 80
