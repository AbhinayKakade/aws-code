---
apiVersion: v1
kind: Namespace
metadata:
  name: ${SURVEY_TAKER_NAMESPACE}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: ${SURVEY_TAKER_NAMESPACE}
  name: ${SURVEY_TAKER_DEPLOYMENT_NAME}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: ${SURVEY_TAKER_APP_NAME}
      namespace: ${SURVEY_TAKER_NAMESPACE}
      cloud.google.com/gke-nodepool: soc-st-ng # ${SURVEY_TAKER_NODE_GROUP}
  replicas: ${SURVEY_TAKER_MIN_REP}
  revisionHistoryLimit: 4
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ${SURVEY_TAKER_APP_NAME}
        namespace: ${SURVEY_TAKER_NAMESPACE}
        cloud.google.com/gke-nodepool: soc-st-ng # ${SURVEY_TAKER_NODE_GROUP}
    spec:
      containers:
        - image: us-east4-docker.pkg.dev/experiencedotcom-devops/experiencedotcom-dev/survey-taker:latest
          imagePullPolicy: Always
          name: ${SURVEY_TAKER_APP_NAME}
          ports:
            - containerPort: 8080
          envFrom:
            - secretRef:
                name: ${SURVEY_TAKER_SECRET}
          resources:
            requests:
              cpu: ${SURVEY_TAKER_REQ_CPU}
              memory: ${SURVEY_TAKER_REQ_MEM}
            limits:
              cpu: ${SURVEY_TAKER_LIM_CPU}
              memory: ${SURVEY_TAKER_LIM_MEM}
          livenessProbe:
            failureThreshold: 2
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
      #     volumeMounts:
      #       - mountPath: /storage
      #         name: ${SURVEY_TAKER_VOLUME}
      # volumes:
      #   - name: ${SURVEY_TAKER_VOLUME}
      #     persistentVolumeClaim:
      #       claimName: ${SURVEY_TAKER_PVC}
      nodeSelector:
        cloud.google.com/gke-nodepool: soc-st-ng # ${SURVEY_TAKER_NODE_GROUP}

---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: ${SURVEY_TAKER_DEPLOYMENT_NAME}
  namespace: ${SURVEY_TAKER_NAMESPACE}
spec:
  maxReplicas: ${SURVEY_TAKER_MAX_REP} # maximum replicas of pods
  minReplicas: ${SURVEY_TAKER_MIN_REP}
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ${SURVEY_TAKER_DEPLOYMENT_NAME} # TARGET name of the deployment the autoscaler need to be run on
  targetCPUUtilizationPercentage: ${SURVEY_TAKER_TGT_CPU_PERCENT} # CPU maximum amount of use on the pod is set to 30%.

---
apiVersion: v1
kind: Service
metadata:
  namespace: ${SURVEY_TAKER_NAMESPACE}
  name: ${SURVEY_TAKER_SERVICE_NAME}
spec:
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
  type: NodePort
  selector:
    app.kubernetes.io/name: ${SURVEY_TAKER_APP_NAME}
    namespace: ${SURVEY_TAKER_NAMESPACE}
    cloud.google.com/gke-nodepool: soc-st-ng # ${SURVEY_TAKER_NODE_GROUP}

# ---
# apiVersion: traefik.containo.us/v1alpha1
# kind: Middleware
# metadata:
#   name: ${SURVEY_TAKER_MIDDLEWARE_NAME}
#   namespace: ${SURVEY_TAKER_NAMESPACE}
# spec:
#   headers:
#     customResponseHeaders:
#       X-XSS-Protection: "1; mode=block"
#       Referrer-Policy: "strict-origin-when-cross-origin"
#       Permissions-Policy: "geolocation=(self), camera=(self), microphone=(self), autoplay=(self)"
#       X-Content-Type-Options: "nosniff"
#       X-Frame-Options: "sameorigin"
#       X-Permitted-Cross-Domain-Policies: "none"
#       Strict-Transport-Security: "max-age=31536000; includeSubdomains; preload"
#       Cross-Origin-Embedder-Policy: "unsafe-none"
#       Cross-Origin-Opener-Policy: "unsafe-none"
#       Cross-Origin-Resource-Policy: "same-origin"
#       Cache-Control: "no-cache, no-store, must-revalidate"

# ---
# apiVersion: traefik.containo.us/v1alpha1
# kind: IngressRoute
# metadata:
#   name: ${SURVEY_TAKER_INGRESSROUTE_NAME}
#   namespace: ${SURVEY_TAKER_NAMESPACE}
# spec:
#   entryPoints:
#     - web
#   routes:
#     - match: Host(`${SURVEY_TAKER_HOST_NAME}`)
#       kind: Rule
#       middlewares:
#         - name: ${SURVEY_TAKER_MIDDLEWARE_NAME}
#       services:
#         - name: ${SURVEY_TAKER_SERVICE_NAME}
#           port: 80


# Google Managed SSL Certificate.
---
apiVersion: networking.gke.io/v1
kind: ManagedCertificate
metadata:
  name: managed-certificate
  namespace: ${SURVEY_TAKER_NAMESPACE}
spec:
  domains:
    - surveys-gcp.experience.com


---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: ${SURVEY_TAKER_NAMESPACE}
  name: ${SURVEY_TAKER_INGRESS_NAME}
  annotations:
    # alb.ingress.kubernetes.io/target-type: instance
    # alb.ingress.kubernetes.io/certificate-arn: ${SURVEY_TAKER_CERTIFICATE_ARN}
    # alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
    # alb.ingress.kubernetes.io/scheme: internet-facing
    # alb.ingress.kubernetes.io/load-balancer-name: ${SURVEY_TAKER_ALB}
    # alb.ingress.kubernetes.io/load-balancer-attributes: access_logs.s3.enabled=true,access_logs.s3.bucket=ss-prd1-v2-alb-access-logs-new,access_logs.s3.prefix=survey-taker-alb,idle_timeout.timeout_seconds=60
    # alb.ingress.kubernetes.io/wafv2-acl-arn: ${WAF_ARN}
    # alb.ingress.kubernetes.io/ssl-redirect: "443"
    # kubernetes.io/ingress.class: ${ING_CLS_NAME}

    kubernetes.io/ingress.allow-http: "false"
    networking.gke.io/managed-certificates: managed-certificate
    kubernetes.io/ingress.global-static-ip-name: survey-taker-host-name
spec:
  rules:
    # - host: ${SURVEY_TAKER_HOST_NAME}
    - host: surveys-gcp.experience.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: ${SURVEY_TAKER_SERVICE_NAME}
                port:
                  number: 80