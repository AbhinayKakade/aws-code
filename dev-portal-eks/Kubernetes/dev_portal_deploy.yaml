---
apiVersion: v1
kind: Namespace
metadata:
  name: ${DEV_PORTAL_NAMESPACE}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: ${DEV_PORTAL_NAMESPACE}
  name: ${DEV_PORTAL_DEPLOYMENT_NAME}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: ${DEV_PORTAL_APP_NAME}
      namespace: ${DEV_PORTAL_NAMESPACE}
      alpha.eksctl.io/nodegroup-name: ${DEV_PORTAL_NODE_GROUP}
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ${DEV_PORTAL_APP_NAME}
        namespace: ${DEV_PORTAL_NAMESPACE}
        alpha.eksctl.io/nodegroup-name: ${DEV_PORTAL_NODE_GROUP}
    spec:
      containers:
        - image: ${DEV_PORTAL_REPOSITORY}:${TAG}
          imagePullPolicy: Always
          name: ${DEV_PORTAL_APP_NAME}
          ports:
            - containerPort: 3000
          resources:
            requests:
              cpu: "100m"
              memory: "350Mi"
            limits:
              cpu: "200m"
              memory: "450Mi"
      nodeSelector:
        "eks.amazonaws.com/nodegroup": "rails-ng"

---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: ${DEV_PORTAL_DEPLOYMENT_NAME}
  namespace: ${DEV_PORTAL_NAMESPACE}
spec:
  maxReplicas: 3 # maximum replicas of pods
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ${DEV_PORTAL_DEPLOYMENT_NAME} # TARGET name of the deployment the autoscaler need to be run on
  targetCPUUtilizationPercentage: 80 # CPU maximum amount of use on the pod is set to 30%.

---
apiVersion: v1
kind: Service
metadata:
  namespace: ${DEV_PORTAL_NAMESPACE}
  name: ${DEV_PORTAL_SERVICE_NAME}
spec:
  ports:
    - port: 80
      targetPort: 3000
      protocol: TCP
  type: NodePort
  selector:
    app.kubernetes.io/name: ${DEV_PORTAL_APP_NAME}
    namespace: ${DEV_PORTAL_NAMESPACE}
    alpha.eksctl.io/nodegroup-name: ${DEV_PORTAL_NODE_GROUP}
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  namespace: ${DEV_PORTAL_NAMESPACE}
  name: ${DEV_PORTAL_INGRESS_NAME}
  annotations:
    external-dns.alpha.kubernetes.io/hostname: ${DEV_PORTAL_HOST_NAME}
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: instance
    # ingress.kubernetes.io/force-ssl-redirect: "true"
    alb.ingress.kubernetes.io/actions.ssl-redirect: '{"Type": "redirect", "RedirectConfig":{ "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}'
    ## SSL Settings
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
    alb.ingress.kubernetes.io/certificate-arn: ${DEV_PORTAL_CERTIFICATE_ARN}
spec:
  rules:
    - http:
        paths:
          - path: /*
            backend:
              serviceName: ssl-redirect
              servicePort: use-annotation
          - path: /*
            backend:
              serviceName: ${DEV_PORTAL_SERVICE_NAME}
              servicePort: 80
