---
apiVersion: v1
kind: Namespace
metadata:
  name: ${RAILS_API_NAMESPACE}

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: ${RAILS_API_PV}
spec:
  capacity:
    storage: ${RAILS_API_PV_SIZE}
  volumeMode: Filesystem
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: efs-sc
  csi:
    driver: efs.csi.aws.com
    volumeHandle: ${EFS_ID}:/:${EFS_AP}
    volumeAttributes:
      encryptInTransit: "true"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ${RAILS_API_PVC}
  namespace: ${RAILS_API_NAMESPACE}
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: efs-sc
  volumeName: ${RAILS_API_PV}
  selector:
    matchLabels:
      name: ${RAILS_API_PV}
  resources:
    requests:
      storage: ${RAILS_API_PV_SIZE}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: ${RAILS_API_NAMESPACE}
  name: ${RAILS_API_DEPLOYMENT_NAME}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: ${RAILS_API_APP_NAME}
      namespace: ${RAILS_API_NAMESPACE}
      alpha.eksctl.io/nodegroup-name: ${RAILS_API_NODE_GROUP}
  replicas: ${RAILS_API_MIN_REP}
  revisionHistoryLimit: 4
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ${RAILS_API_APP_NAME}
        namespace: ${RAILS_API_NAMESPACE}
        alpha.eksctl.io/nodegroup-name: ${RAILS_API_NODE_GROUP}
    spec:
      containers:
        - image: ${RAILS_API_REPOSITORY}:${TAG}
          imagePullPolicy: Always
          name: ${RAILS_API_APP_NAME}
          ports:
            - containerPort: 3000
          resources:
            requests:
              cpu: ${RAILS_API_REQ_CPU}
              memory: ${RAILS_API_REQ_MEM}
            limits:
              cpu: ${RAILS_API_LIM_CPU}
              memory: ${RAILS_API_LIM_MEM}
          volumeMounts:
            - mountPath: /storage
              name: ${RAILS_API_VOLUME}
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - -c
                - |-
                  used=$(awk '{ print int($1/1.049e+6) }' /sys/fs/cgroup/memory/memory.usage_in_bytes);
                  thresh=$(awk '{ print int( $1 / 1.049e+6 * 0.95 ) }' /sys/fs/cgroup/memory/memory.limit_in_bytes);
                  if [[ ${used} -gt ${thresh} ]]; then exit 1; fi
            initialDelaySeconds: 300
            periodSeconds: 20
            failureThreshold: 2
            timeoutSeconds: 2
      volumes:
        - name: ${RAILS_API_VOLUME}
          persistentVolumeClaim:
            claimName: ${RAILS_API_PVC}
      nodeSelector:
        "eks.amazonaws.com/nodegroup": ${RAILS_API_NODE_GROUP}

# rails-api hpa
---
apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  name: ${RAILS_API_DEPLOYMENT_NAME}
  namespace: ${RAILS_API_NAMESPACE}
spec:
  maxReplicas: ${RAILS_API_MAX_REP}
  minReplicas: ${RAILS_API_MIN_REP}
  behavior:
    scaleDown:
      policies:
        - type: Pods
          value: 1
          periodSeconds: 30
        - type: Percent
          value: 10
          periodSeconds: 30
      selectPolicy: Min
      stabilizationWindowSeconds: 300
    scaleUp:
      policies:
        - type: Pods
          value: 1
          periodSeconds: 60
        - type: Percent
          value: 10
          periodSeconds: 60
      selectPolicy: Max
      stabilizationWindowSeconds: 0
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ${RAILS_API_DEPLOYMENT_NAME}
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: ${RAILS_API_TGT_CPU_PERCENT}
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80

# service
---
apiVersion: v1
kind: Service
metadata:
  namespace: ${RAILS_API_NAMESPACE}
  name: ${RAILS_API_SERVICE_NAME}
spec:
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
  type: NodePort
  selector:
    app.kubernetes.io/name: ${RAILS_API_APP_NAME}
    namespace: ${RAILS_API_NAMESPACE}
    alpha.eksctl.io/nodegroup-name: ${RAILS_API_NODE_GROUP}

# Ingress
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: ${RAILS_API_NAMESPACE}
  name: ${RAILS_API_INGRESS_NAME}
  annotations:
    # external-dns.alpha.kubernetes.io/hostname: ${RAILS_API_HOST_NAME}
    alb.ingress.kubernetes.io/target-type: instance
    alb.ingress.kubernetes.io/certificate-arn: ${RAILS_API_CERTIFICATE_ARN}
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/load-balancer-name: ${RAILS_API_ALB}
    alb.ingress.kubernetes.io/ssl-policy: "ELBSecurityPolicy-FS-1-2-2019-08"
    alb.ingress.kubernetes.io/load-balancer-attributes: idle_timeout.timeout_seconds=300
    alb.ingress.kubernetes.io/wafv2-acl-arn: ${WAF_ARN}
    alb.ingress.kubernetes.io/ssl-redirect: "443"
    alb.ingress.kubernetes.io/target-node-labels: eks.amazonaws.com/nodegroup=${RAILS_API_NODE_GROUP}

spec:
  ingressClassName: ${ING_CLS_NAME}
  rules:
    - host: ${RAILS_API_HOST_NAME}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: ${RAILS_API_SERVICE_NAME}
                port:
                  number: 80
# Old hpa
# ---
# apiVersion: autoscaling/v1
# kind: HorizontalPodAutoscaler
# metadata:
#   name: ${RAILS_API_DEPLOYMENT_NAME}
#   namespace: ${RAILS_API_NAMESPACE}
# spec:
#   maxReplicas: ${RAILS_API_MAX_REP} # maximum replicas of pods
#   minReplicas: ${RAILS_API_MIN_REP}
#   scaleTargetRef:
#     apiVersion: apps/v1
#     kind: Deployment
#     name: ${RAILS_API_DEPLOYMENT_NAME} # TARGET name of the deployment the autoscaler need to be run on
#   targetCPUUtilizationPercentage: ${RAILS_API_TGT_CPU_PERCENT} # CPU maximum amount of use on the pod is set to 30%.
