---
apiVersion: v1
kind: Namespace
metadata:
  name: ${RAILS_DELAYED_JOBS_NAMESPACE}

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: ${RAILS_DELAYED_JOBS_PV}
spec:
  capacity:
    storage: ${RAILS_DELAYED_JOBS_PV_SIZE}
  volumeMode: Filesystem
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: efs-sc
  csi:
    driver: efs.csi.aws.com
    volumeHandle: ${EFS_ID}:/:${EFS_AP}
    volumeAttributes:
      encryptInTransit: "true"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ${RAILS_DELAYED_JOBS_PVC}
  namespace: ${RAILS_DELAYED_JOBS_NAMESPACE}
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: efs-sc
  volumeName: ${RAILS_DELAYED_JOBS_PV}
  selector:
    matchLabels:
      name: ${RAILS_DELAYED_JOBS_PV}
  resources:
    requests:
      storage: ${RAILS_DELAYED_JOBS_PV_SIZE}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: ${RAILS_DELAYED_JOBS_NAMESPACE}
  name: ${RAILS_DELAYED_JOBS_DEPLOYMENT_NAME}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: ${RAILS_DELAYED_JOBS_APP_NAME}
      namespace: ${RAILS_DELAYED_JOBS_NAMESPACE}
      alpha.eksctl.io/nodegroup-name: ${RAILS_DELAYED_JOBS_NODE_GROUP}
  replicas: ${RAILS_DELAYED_JOBS_MIN_REP}
  revisionHistoryLimit: 4
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ${RAILS_DELAYED_JOBS_APP_NAME}
        namespace: ${RAILS_DELAYED_JOBS_NAMESPACE}
        alpha.eksctl.io/nodegroup-name: ${RAILS_DELAYED_JOBS_NODE_GROUP}
    spec:
      containers:
        - image: ${RAILS_DELAYED_JOBS_REPOSITORY}:${TAG}
          imagePullPolicy: Always
          command: ["/bin/sh", "-c"]
          args: ["RAILS_ENV=production bin/delayed_job run"]
          name: ${RAILS_DELAYED_JOBS_APP_NAME}
          resources:
            requests:
              cpu: ${RAILS_DELAYED_JOBS_REQ_CPU}
              memory: ${RAILS_DELAYED_JOBS_REQ_MEM}
            limits:
              cpu: ${RAILS_DELAYED_JOBS_LIM_CPU}
              memory: ${RAILS_DELAYED_JOBS_LIM_MEM}
          # livenessProbe:
          #   exec:
          #     command:
          #       - /bin/bash
          #       - -c
          #       - |-
          #         used=$(awk '{ print int($1/1.049e+6) }' /sys/fs/cgroup/memory/memory.usage_in_bytes);
          #         thresh=$(awk '{ print int( $1 / 1.049e+6 * 0.95 ) }' /sys/fs/cgroup/memory/memory.limit_in_bytes);
          #         if [[ ${used} -gt ${thresh} ]]; then exit 1; fi
          #   initialDelaySeconds: 300
          #   periodSeconds: 20
          #   failureThreshold: 2
          #   timeoutSeconds: 2
          volumeMounts:
            - mountPath: /storage
              name: ${RAILS_DELAYED_JOBS_VOLUME}
      volumes:
        - name: ${RAILS_DELAYED_JOBS_VOLUME}
          persistentVolumeClaim:
            claimName: ${RAILS_DELAYED_JOBS_PVC}
      nodeSelector:
        "eks.amazonaws.com/nodegroup": ${RAILS_DELAYED_JOBS_NODE_GROUP}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: ${RAILS_DELAYED_JOBS_NAMESPACE}
  name: ${RAILS_DEPLOYMENT_NAME_SIDEKIQ}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: ${RAILS_APP_NAME_SIDEKIQ}
      namespace: ${RAILS_DELAYED_JOBS_NAMESPACE}
      alpha.eksctl.io/nodegroup-name: ${RAILS_DELAYED_JOBS_NODE_GROUP}
  replicas: ${RAILS_SIDEKIQ_MIN_REP}
  revisionHistoryLimit: 4
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ${RAILS_APP_NAME_SIDEKIQ}
        namespace: ${RAILS_DELAYED_JOBS_NAMESPACE}
        alpha.eksctl.io/nodegroup-name: ${RAILS_DELAYED_JOBS_NODE_GROUP}
    spec:
      containers:
        - image: ${RAILS_DELAYED_JOBS_REPOSITORY}:${TAG}
          imagePullPolicy: Always
          command: ["/bin/sh", "-c"]
          args: ["bundle exec sidekiq -C config/sidekiq.yml -e production"]
          name: ${RAILS_APP_NAME_SIDEKIQ}
          resources:
            requests:
              cpu: ${RAILS_SIDEKIQ_REQ_CPU}
              memory: ${RAILS_SIDEKIQ_REQ_MEM}
            limits:
              cpu: ${RAILS_SIDEKIQ_LIM_CPU}
              memory: ${RAILS_SIDEKIQ_LIM_MEM}
          # livenessProbe:
          #   exec:
          #     command:
          #       - /bin/bash
          #       - -c
          #       - |-
          #         used=$(awk '{ print int($1/1.049e+6) }' /sys/fs/cgroup/memory/memory.usage_in_bytes);
          #         thresh=$(awk '{ print int( $1 / 1.049e+6 * 0.95 ) }' /sys/fs/cgroup/memory/memory.limit_in_bytes);
          #         if [[ ${used} -gt ${thresh} ]]; then exit 1; fi
          #   initialDelaySeconds: 300
          #   periodSeconds: 20
          #   failureThreshold: 2
          #   timeoutSeconds: 2
          volumeMounts:
            - mountPath: /storage
              name: ${RAILS_SIDEKIQ_VOLUME}
      volumes:
        - name: ${RAILS_SIDEKIQ_VOLUME}
          persistentVolumeClaim:
            claimName: ${RAILS_DELAYED_JOBS_PVC}
      nodeSelector:
        "eks.amazonaws.com/nodegroup": ${RAILS_DELAYED_JOBS_NODE_GROUP}

# delayed-jobs hpa
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ${RAILS_DELAYED_JOBS_DEPLOYMENT_NAME}
  namespace: ${RAILS_DELAYED_JOBS_NAMESPACE}
spec:
  maxReplicas: ${RAILS_DELAYED_JOBS_MAX_REP} # maximum replicas of pods
  minReplicas: ${RAILS_DELAYED_JOBS_MIN_REP}
  behavior:
    scaleDown:
      policies:
        - type: Pods
          value: 1
          periodSeconds: 30
        - type: Percent
          value: 10
          periodSeconds: 30
      selectPolicy: Min
      stabilizationWindowSeconds: 300
    scaleUp:
      policies:
        - type: Pods
          value: 1
          periodSeconds: 60
        - type: Percent
          value: 10
          periodSeconds: 60
      selectPolicy: Max
      stabilizationWindowSeconds: 0
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ${RAILS_DELAYED_JOBS_DEPLOYMENT_NAME}
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: ${RAILS_DELAYED_JOBS_TGT_CPU_PERCENT}
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80

# sidekiq hpa
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ${RAILS_DEPLOYMENT_NAME_SIDEKIQ}
  namespace: ${RAILS_DELAYED_JOBS_NAMESPACE}
spec:
  maxReplicas: ${RAILS_SIDEKIQ_MAX_REP} # maximum replicas of pods
  minReplicas: ${RAILS_SIDEKIQ_MIN_REP}
  behavior:
    scaleDown:
      policies:
        - type: Pods
          value: 1
          periodSeconds: 30
        - type: Percent
          value: 10
          periodSeconds: 30
      selectPolicy: Min
      stabilizationWindowSeconds: 300
    scaleUp:
      policies:
        - type: Pods
          value: 1
          periodSeconds: 60
        - type: Percent
          value: 10
          periodSeconds: 60
      selectPolicy: Max
      stabilizationWindowSeconds: 0
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ${RAILS_DEPLOYMENT_NAME_SIDEKIQ}
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: ${RAILS_SIDEKIQ_TGT_CPU_PERCENT}
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
# old hpa
# ---
# apiVersion: autoscaling/v1
# kind: HorizontalPodAutoscaler
# metadata:
#   name: ${RAILS_DELAYED_JOBS_DEPLOYMENT_NAME}
#   namespace: ${RAILS_DELAYED_JOBS_NAMESPACE}
# spec:
#   maxReplicas: ${RAILS_DELAYED_JOBS_MAX_REP} # maximum replicas of pods
#   minReplicas: ${RAILS_DELAYED_JOBS_MIN_REP}
#   scaleTargetRef:
#     apiVersion: apps/v1
#     kind: Deployment
#     name: ${RAILS_DELAYED_JOBS_DEPLOYMENT_NAME} # TARGET name of the deployment the autoscaler need to be run on
#   targetCPUUtilizationPercentage: ${RAILS_DELAYED_JOBS_TGT_CPU_PERCENT} # CPU maximum amount of use on the pod is set to 30%.

# old hpa
# ---
# apiVersion: autoscaling/v1
# kind: HorizontalPodAutoscaler
# metadata:
#   name: ${RAILS_DEPLOYMENT_NAME_SIDEKIQ}
#   namespace: ${RAILS_DELAYED_JOBS_NAMESPACE}
# spec:
#   maxReplicas: ${RAILS_SIDEKIQ_MAX_REP} # maximum replicas of pods
#   minReplicas: ${RAILS_SIDEKIQ_MIN_REP}
#   scaleTargetRef:
#     apiVersion: apps/v1
#     kind: Deployment
#     name: ${RAILS_DEPLOYMENT_NAME_SIDEKIQ} # TARGET name of the deployment the autoscaler need to be run on
#   targetCPUUtilizationPercentage: ${RAILS_SIDEKIQ_TGT_CPU_PERCENT} # CPU maximum amount of use on the pod is set to 30%.
